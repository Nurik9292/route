import { authAPI, adminAPI } from "@/api/index";
import { useLocalStorage } from "@/composables";
import store from "@/store";
import { logger } from "@/utils/index.js";

const API_TOKEN_STORAGE_KEY = 'api-token';
const REFRESH_TOKEN_STORAGE_KEY = 'refresh-token';
const ADMIN_DATA_STORAGE_KEY = 'admin-data';

const { get: lsGet, set: lsSet, remove: lsRemove } = useLocalStorage(false);

export const authService = {


  async login(username, password) {
    try {
      logger.info('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);

      const response = await authAPI.login({ username, password });

      this.setApiToken(response.access_token);
      this.setRefreshToken(response.refresh_token);

      const adminData = adminAPI.convertBackendAdmin(response.admin);
      this.setAdminData(adminData);

      await store.dispatch('admin/init', adminData);

      logger.info('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', adminData.username);
      return adminData;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      if (error.response?.status === 401) {
        this.destroy();
      }
      throw error;
    }
  },

  async logout() {
    try {
      logger.info('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
      try {
        await authAPI.logout();
      } catch (error) {
        logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å backend –æ logout:', error);
      }
    } catch (error) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ logout:', error);
    } finally {
      this.destroy();
      await store.dispatch('admin/clear');
      logger.info('‚úÖ –í—ã—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  },


  async restoreSession() {
    logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...');

    const token = this.getApiToken();
    const refreshToken = this.getRefreshToken();
    const adminData = this.getAdminData();

    if (!token || !adminData) {
      logger.info('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏');
      return null;
    }

    if (!this.hasValidTokenLocally()) {
      logger.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –ª–æ–∫–∞–ª—å–Ω–æ');

      if (refreshToken) {
        try {
          logger.info('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω...');
          await this.refreshToken();

          return await this.validateSessionWithServer();
        } catch (error) {
          logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', error);
          this.destroy();
          return null;
        }
      } else {
        logger.warn('‚ö†Ô∏è –ù–µ—Ç refresh token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        this.destroy();
        return null;
      }
    }

    return await this.validateSessionWithServer();
  },


  async getCurrentAdmin() {
    try {
      logger.info('üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

      const response = await authAPI.getCurrentAdmin();

      if (!response) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      const adminData = adminAPI.convertBackendAdmin(response);

      this.setAdminData(adminData);

      logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:', adminData.username);
      return adminData;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);

      if (error.response?.status === 401) {
        this.destroy();
      }

      throw error;
    }
  },

  async getProfile() {
    return await this.getCurrentAdmin();
  },

  async validateSessionWithServer() {
    try {
      logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');

      const currentAdmin = await authAPI.getCurrentAdmin();

      if (!currentAdmin) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      }

      await store.dispatch('admin/init', currentAdmin);

      logger.info('‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞:', currentAdmin.username);
      return currentAdmin;

    } catch (error) {
      logger.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞:', error);

      if (error.response?.status === 401) {
        const refreshToken = this.getRefreshToken();

        if (refreshToken) {
          try {
            logger.info('üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...');
            await this.refreshToken();

            return await this.validateSessionWithServer();
          } catch (refreshError) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', refreshError);
            this.destroy();
            return null;
          }
        }
      }

      this.destroy();
      return null;
    }
  },


  async refreshToken() {
    const refreshToken = this.getRefreshToken();
    if (!refreshToken) {
      throw new Error('No refresh token available');
    }

    try {
      logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');

      const response = await authAPI.refreshToken(refreshToken);

      this.setApiToken(response.access_token);
      this.setRefreshToken(response.refresh_token);

      logger.info('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return response.access_token;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      await this.logout();
      throw error;
    }
  },

  hasValidTokenLocally() {
    const token = this.getApiToken();
    if (!token) return false;

    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const expiry = payload.exp * 1000;
      const now = Date.now();

      return now < (expiry - 30000);
    } catch (error) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  },


  shouldRefreshToken() {
    const token = this.getApiToken();
    if (!token) return false;

    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const expiry = payload.exp * 1000;
      const now = Date.now();

      return now > (expiry - 5 * 60 * 1000);
    } catch (error) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return false;
    }
  },



  getApiToken() {
    return lsGet(API_TOKEN_STORAGE_KEY);
  },

  setApiToken(token) {
    lsSet(API_TOKEN_STORAGE_KEY, token);
  },

  getRefreshToken() {
    return lsGet(REFRESH_TOKEN_STORAGE_KEY);
  },

  setRefreshToken(token) {
    lsSet(REFRESH_TOKEN_STORAGE_KEY, token);
  },

  getAdminData() {
    return lsGet(ADMIN_DATA_STORAGE_KEY);
  },

  setAdminData(data) {
    lsSet(ADMIN_DATA_STORAGE_KEY, data);
  },

  destroy() {
    lsRemove(API_TOKEN_STORAGE_KEY);
    lsRemove(REFRESH_TOKEN_STORAGE_KEY);
    lsRemove(ADMIN_DATA_STORAGE_KEY);
  },


  async updateProfile(data) {
    try {
      const currentUser = store.getters['admin/currentUser'];
      if (!currentUser) {
        throw new Error('No current user found');
      }

      logger.info('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', currentUser.username);

      const updatedAdmin = await adminAPI.updateProfile(data);
      const convertedUser = adminAPI.convertBackendAdmin(updatedAdmin);

      this.setAdminData(convertedUser);
      await store.dispatch('admin/updateCurrentUser', convertedUser);

      logger.info('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', convertedUser.username);
      return convertedUser;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }
};