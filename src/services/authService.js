import { authAPI, adminAPI } from "@/api/index";
import { useLocalStorage } from "@/composables";
import store from "@/store";
import { http } from "@/services/http.js";
import { logger } from "@/utils/index.js";

const API_TOKEN_STORAGE_KEY = 'api-token';
const REFRESH_TOKEN_STORAGE_KEY = 'refresh-token';
const USER_DATA_STORAGE_KEY = 'user-data';

const { get: lsGet, set: lsSet, remove: lsRemove } = useLocalStorage(false);

export const authService = {

  async login(username, password) {
    try {
      logger.info('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);

      const response = await adminAPI.login({ username, password });

      this.setApiToken(response.access_token);
      this.setRefreshToken(response.refresh_token);

      const userData = adminAPI.convertBackendUser(response.admin);
      this.setUserData(userData);

      await store.dispatch('admin/init', userData);

      logger.info('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', userData.username);
      return response;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);

      if (error.response?.status === 401) {
        this.destroy();
      }

      throw error;
    }
  },

  async logout() {
    try {
      logger.info('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');

      try {
        await adminAPI.logout();
      } catch (error) {
        logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å backend –æ logout:', error);
      }

    } catch (error) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ logout:', error);
    } finally {
      this.destroy();
      await store.dispatch('admin/clear');
      logger.info('‚úÖ –í—ã—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  },

  async refreshToken() {
    const refreshToken = this.getRefreshToken();
    if (!refreshToken) {
      throw new Error('No refresh token available');
    }

    try {
      logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');

      const response = await adminAPI.refreshToken(refreshToken);

      this.setApiToken(response.access_token);
      this.setRefreshToken(response.refresh_token);

      logger.info('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return response.access_token;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);

      await this.logout();
      throw error;
    }
  },


  async initializeFromStorage() {
    const token = this.getApiToken();
    const userData = this.getUserData();

    if (!token || !userData) {
      logger.info('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏');
      return null;
    }

    if (!this.hasValidToken()) {
      logger.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
      this.destroy();
      return null;
    }

    await store.dispatch('admin/init', userData);

    logger.info('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', userData.username);
    return userData;
  },

  async restoreSession() {
    return await this.initializeFromStorage();
  },


  async updateProfile(data) {
    try {
      const currentUser = store.getters['admin/currentUser'];
      if (!currentUser) {
        throw new Error('No current user found');
      }

      logger.info('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', currentUser.username);

      const updatedUser = await adminAPI.updateProfile(data);
      const convertedUser = adminAPI.convertBackendUser(updatedUser);

      this.setUserData(convertedUser);
      await store.dispatch('admin/updateCurrent', convertedUser);

      logger.info('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return convertedUser;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  },

  async getProfile() {

    const storeUser = store.getters['admin/currentUser'];
    if (storeUser) {
      return storeUser;
    }

    const cachedUser = this.getUserData();
    if (cachedUser) {
      await store.dispatch('admin/init', cachedUser);
      return cachedUser;
    }

    try {
      logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞...');

      const profile = await adminAPI.getCurrentUser();
      const convertedProfile = adminAPI.convertBackendUser(profile);

      this.setUserData(convertedProfile);
      await store.dispatch('admin/init', convertedProfile);

      return convertedProfile;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);

      if (error.response?.status === 401) {
        await this.logout();
      }
      throw error;
    }
  },



  getApiToken: () => lsGet(API_TOKEN_STORAGE_KEY),
  setApiToken: (token) => lsSet(API_TOKEN_STORAGE_KEY, token),

  getRefreshToken: () => lsGet(REFRESH_TOKEN_STORAGE_KEY),
  setRefreshToken: (token) => lsSet(REFRESH_TOKEN_STORAGE_KEY, token),

  getUserData: () => lsGet(USER_DATA_STORAGE_KEY),
  setUserData: (userData) => lsSet(USER_DATA_STORAGE_KEY, userData),

  hasApiToken() {
    return Boolean(this.getApiToken());
  },

  hasValidToken() {
    const token = this.getApiToken();
    if (!token) return false;

    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Math.floor(Date.now() / 1000);

      return payload.exp > (now + 300);

    } catch (error) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JWT —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  },

  isAuthenticated() {
    return this.hasApiToken() && this.hasValidToken();
  },

  destroy() {
    lsRemove(API_TOKEN_STORAGE_KEY);
    lsRemove(REFRESH_TOKEN_STORAGE_KEY);
    lsRemove(USER_DATA_STORAGE_KEY);
  },

  getCurrentUser() {
    const storeUser = store.getters['admin/currentUser'];
    if (storeUser) return storeUser;

    return this.getUserData();
  },

  async postSignIn(credentials) {
    return await this.login(credentials.name || credentials.username, credentials.password);
  },

  async delete() {
    return await this.logout();
  },

  setTokensUsingCompositeToken(token) {
    this.setApiToken(token);
  }
};