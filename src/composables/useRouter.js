import { RouterKey } from '@/symbols';
import { requireInjection } from '@/utils';
import Router from '@/router';

let router;

export const useRouter = () => {
  // ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ router instance
  if (!router) {
    try {
      router = requireInjection(RouterKey);
      console.log('üîß Router –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ injection:', router);
    } catch (error) {
      // Fallback –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∏–Ω—Å—Ç–∞–Ω—Å—É
      router = window.__router_instance__;
      console.log('üîß Router –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ window:', router);
    }
  }

  if (!router) {
    console.error('‚ùå Router –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    throw new Error('Router –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  const getRouteParam = (name) => {
    const param = router.$currentRoute.value?.params?.[name];
    console.log('üîß getRouteParam:', name, '‚Üí', param);
    return param;
  };

  const getCurrentScreen = () => {
    const screen = router.$currentRoute.value?.screen;
    console.log('üîß getCurrentScreen() ‚Üí', screen);
    console.log('üîß Full currentRoute:', router.$currentRoute.value);
    return screen;
  };

  const isCurrentScreen = (...screens) => {
    const current = router.$currentRoute.value?.screen;
    const result = screens.includes(current);
    console.log('üîß isCurrentScreen:', screens, 'current:', current, '‚Üí', result);
    return result;
  };

  const onScreenActivated = (screen, cb) => {
    console.log('üîß onScreenActivated –¥–ª—è:', screen);

    if (isCurrentScreen(screen)) {
      console.log('üîß –≠–∫—Ä–∞–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º callback');
      cb();
    }

    router.onRouteChanged((route) => {
      console.log('üîß onRouteChanged –≤ onScreenActivated:', route.screen, '=== screen:', screen);
      if (route.screen === screen) {
        cb();
      }
    });
  };

  return {
    getRouteParam,
    getCurrentScreen,
    isCurrentScreen,
    onScreenActivated,
    go: Router.go,
    onRouteChanged: router.onRouteChanged.bind(router),
    resolveRoute: router.resolve.bind(router),
    triggerNotFound: router.triggerNotFound.bind(router),
    router // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ router –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  };
};