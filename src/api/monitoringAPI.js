import { http } from '@/services'
import { logger } from "@/utils/index.js";

class MonitoringAPI {


    async search(params) {
        try {
            logger.info('üì° API –∑–∞–ø—Ä–æ—Å:', params)

            const response = await http.post('/trip-planning/search', params)
            console.log('search search', response)
            let normalizedResponse = null

            if (response) {
                const data = response

                if (data.trip_options && Array.isArray(data.trip_options)) {
                    normalizedResponse = {
                        trip_options: data.trip_options,
                        status: data.status || 'success'
                    }
                    logger.info('‚úÖ –§–æ—Ä–º–∞—Ç: trip_options –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', data.trip_options.length)
                }

                // –í–∞—Ä–∏–∞–Ω—Ç 2: –û–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å option_id (–∫–∞–∫ –≤ –≤–∞—à–µ–º JSON)
                else if (data.option_id) {
                    normalizedResponse = {
                        trip_options: [data],
                        status: 'success'
                    }
                    logger.info('‚úÖ –§–æ—Ä–º–∞—Ç: –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, –æ–±–µ—Ä–Ω—É—Ç –≤ –º–∞—Å—Å–∏–≤')
                }

                // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤ –≤ data
                else if (Array.isArray(data)) {
                    normalizedResponse = {
                        trip_options: data,
                        status: 'success'
                    }
                    logger.info('‚úÖ –§–æ—Ä–º–∞—Ç: –ø—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', data.length)
                }

                // –í–∞—Ä–∏–∞–Ω—Ç 4: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                else {
                    logger.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:', data)
                    normalizedResponse = {
                        trip_options: [],
                        status: 'error',
                        message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'
                    }
                }
            } else {
                logger.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API')
                normalizedResponse = {
                    trip_options: [],
                    status: 'error',
                    message: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'
                }
            }

            return normalizedResponse

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ—à–∏–±–∫–µ
            if (error.response && error.response.data) {
                throw error
            }

            throw new Error('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        }
    }

    async getVehiclesRoute(routeNumber) {
        return await http.get(`/vehicles/route/${routeNumber}`);
    }

    async getAllRoutes() {
        return await http.get('/admin/routes/all');
    }

    async getActiveVehicles() {
        return await http.get('/vehicles/active');
    }

    async getStopArrivals(stopId) {
        return await http.get(`/stops/${stopId}/arrivals`);
    }

    async getNearbyStops(params) {
           return await http.get('/trip-planning/nearby-stops', { params });
    }

    createVehicleStream(routeNumbers = [], onMessage = null, onError = null) {
        const wsUrl = this.getWebSocketUrl()
        const params = routeNumbers.length ? `?routes=${routeNumbers.join(',')}` : ''

        try {
            const ws = new WebSocket(`${wsUrl}/vehicle-positions${params}`)

            ws.onopen = () => {
                console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
            }

            ws.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data)
                    if (onMessage) onMessage(data)
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
                }
            }

            ws.onerror = (error) => {
                console.error('WebSocket –æ—à–∏–±–∫–∞:', error)
                if (onError) onError(error)
            }

            ws.onclose = (event) => {
                console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason)
            }

            return ws
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error)
            if (onError) onError(error)
            throw error
        }
    }

    getWebSocketUrl() {
        const baseUrl = import.meta.env.VITE_WS_URL || 'ws://localhost:8080'
        return `${baseUrl}/ws`
    }




}

export default new MonitoringAPI()