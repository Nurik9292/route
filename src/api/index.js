export { default as authAPI } from './authAPI';
export { default as routeAPI } from './routeAPI';
export { default as stopAPI } from './stopAPI';
export { default as adminAPI } from './adminAPI.js';
export { default as bannerAPI } from './bannerAPI';

import authAPI from './authAPI';
import routeAPI from './routeAPI';
import stopAPI from './stopAPI';
import adminAPI from './adminAPI';
import bannerAPI from './bannerAPI';

export const api = {
    auth: authAPI,
    routes: routeAPI,
    stops: stopAPI,
    admins: adminAPI,
    banners: bannerAPI
};


export const apiChecker = {

    async checkConnection() {
        try {
            await routeAPI.getActiveRoutes();
            return { status: 'connected', backend: true };

        } catch (error) {
            console.warn('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return {
                status: 'disconnected',
                backend: false,
                error: error.message
            };
        }
    },


    async checkAuthentication() {
        try {
            await authAPI.getCurrentUser();
            return { status: 'authenticated', auth: true };

        } catch (error) {
            return {
                status: 'unauthenticated',
                auth: false,
                error: error.message
            };
        }
    },

    async healthCheck() {
        const connection = await this.checkConnection();
        const auth = await this.checkAuthentication();

        return {
            timestamp: new Date().toISOString(),
            backend: connection.backend,
            authenticated: auth.auth,
            details: { connection, auth }
        };
    }
};


// if (import.meta.env.DEV) {
//
//     window.testAPI = async function() {
//         console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
//
//         try {
//             console.log('üì° –¢–µ—Å—Ç: Backend –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å');
//             const routes = await routeAPI.getActiveRoutes();
//             console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω, –º–∞—Ä—à—Ä—É—Ç–æ–≤:', routes.length);
//
//             console.log('üîê –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏');
//             try {
//                 const user = await authAPI.getCurrentUser();
//                 console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.username);
//             } catch (authError) {
//                 console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
//             }
//
//             console.log('üë• –¢–µ—Å—Ç: –ê–¥–º–∏–Ω—Å–∫–∏–µ API');
//             try {
//                 const admins = await adminAPI.getAll();
//                 console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ API —Ä–∞–±–æ—Ç–∞—é—Ç, –∞–¥–º–∏–Ω–æ–≤:', admins.length);
//             } catch (adminError) {
//                 console.log('‚ö†Ô∏è –ê–¥–º–∏–Ω—Å–∫–∏–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', adminError.message);
//             }
//
//             console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
//
//         } catch (error) {
//             console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API:', error);
//         }
//     };
//
//     setTimeout(() => {
//         console.log('üöÄ –ê–≤—Ç–æ—Ç–µ—Å—Ç API —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
//         window.testAPI();
//     }, 2000);
// }


export const apiConfig = {
    baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8080/api/v1',
    timeout: 30000,
    retryAttempts: 3,
    retryDelay: 1000
};